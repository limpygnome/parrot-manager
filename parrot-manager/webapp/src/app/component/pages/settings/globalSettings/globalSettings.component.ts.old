import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { FormBuilder, Validators } from '@angular/forms';

import { RuntimeService } from 'app/service/runtime.service'
import { SettingsService } from 'app/service/settings.service'
import { DatabaseService } from 'app/service/database.service'
import { RecentFileService } from 'app/service/recentFile.service'
import { BackupService } from 'app/service/backup.service'
import { ThemeService } from 'app/service/theme.service'
import { SendKeysService } from 'app/service/sendKeys.service'

@Component({
    templateUrl: "globalSettings.component.html",
    providers: [RecentFileService],
    selector: "globalSettings"
})
export class GlobalSettingsComponent
{
    public globalSettingsForm = this.fb.group({
        recentFilesEnabled: [false],
        recentFilesOpenLastOnStartup: [false],
        automaticBackupsOnSave: [false],
        automaticBackupsRetained: [""],
        automaticBackupDelay: [""],
        remoteSyncInterval: [""],
        remoteSyncIntervalEnabled: [false],
        remoteSyncOnOpeningDatabase: [false],
        remoteSyncOnChange: [false],
        theme: [""],
        saveWindowState: [""],
        inactivityTimeout: [""],
        wipeClipboardDelay: [""],
        autoSave: [true],
        keyboardLayout: [""]
    });

    recentFilesClearEnabled : boolean;

    constructor(
        public runtimeService: RuntimeService,
        public settingsService: SettingsService,
        public databaseService: DatabaseService,
        public recentFileService: RecentFileService,
        public backupService: BackupService,
        public themeService: ThemeService,
        public sendKeysService: SendKeysService,
        public fb: FormBuilder,
        public router: Router
    ) { }



    globalResetToDefault()
    {
        console.log("resetting to default settings");
        var errorMessage = this.settingsService.reset();

        if (errorMessage != null)
        {
            toastr.error(errorMessage);
        }

        this.populateSettings();
    }

    trackChildrenKeyboardLayouts(index, layout)
    {
        return layout ? layout.getName() : null;;
    }

}
